# Project Name
PROJECT = scheduler

# Directories
DIR = /home/arieh/git/ds
DBG_OBJ_DIR = $(DIR)/bin/debug
REL_OBJ_DIR = $(DIR)/bin/release
HDR_DIR = $(DIR)/include
SRC_DIR =  $(DIR)/src
TEST_DIR = $(DIR)/test
# Extra Directories
UID_DIR = /home/arieh/git/system_programing
UID_LIB_DIR = $(UID_DIR)/bin/release
UID_HDR_DIR = $(UID_DIR)/include

# Compiler
CC = gcc
CFLAGS = -ansi -pedantic-errors -Wall -Wextra -I$(HDR_DIR) -I$(UID_HDR_DIR)
DBG_FLAGS = -g
REL_FLAGS = -O3

# Library Paths and Names
TASK_LIB = -L$(REL_OBJ_DIR) -l_task
UID_LIB = -L$(UID_LIB_DIR) -l_uid
PQ_LIB = -L$(REL_OBJ_DIR) -l_pq
SORTED_LIST_LIB = -L$(REL_OBJ_DIR) -l_sorted_list
DLL_LIB = -L$(REL_OBJ_DIR) -l_dll

# Source files
SRC_FILE = $(SRC_DIR)/$(PROJECT).c
# Test files
TEST_FILE = $(TEST_DIR)/$(PROJECT)_test.c
# Header files
HDR_FILES = $(HDR_DIR)/$(PROJECT).h

# Object files for debug and release
DBG_SRC_OBJ = $(DBG_OBJ_DIR)/$(PROJECT).o
DBG_TEST_OBJ = $(DBG_OBJ_DIR)/$(PROJECT)_test.o
REL_SRC_OBJ = $(REL_OBJ_DIR)/$(PROJECT).o
REL_TEST_OBJ = $(REL_OBJ_DIR)/$(PROJECT)_test.o

# Default target
all: debug

# Debug target
debug: $(DIR)/$(PROJECT).out

$(DIR)/$(PROJECT).out: $(DBG_SRC_OBJ) $(DBG_TEST_OBJ)
	@ $(CC) $(DBG_FLAGS) $^ $(TASK_LIB) $(UID_LIB) $(PQ_LIB) $(SORTED_LIST_LIB)\
	  $(DLL_LIB) -o $@

# Rule to generate object file for project in debug
$(DBG_SRC_OBJ): $(SRC_FILE) $(HDR_FILES)
	@ $(CC) $(CFLAGS) $(DBG_FLAGS) -c $< -o $@
$(DBG_TEST_OBJ): $(TEST_FILE) $(HDR_FILES)
	@ $(CC) $(CFLAGS) $(DBG_FLAGS) -c $< -o $@

# Release target
release: $(DIR)/$(PROJECT)_release.out

$(DIR)/$(PROJECT)_release.out: $(REL_SRC_OBJ) $(REL_TEST_OBJ)
	@ $(CC) $(REL_FLAGS) $^ $(TASK_LIB) $(UID_LIB) $(PQ_LIB) $(SORTED_LIST_LIB)\
	  $(DLL_LIB) -o $@
	
# Rule to generate object file for project in release
$(REL_SRC_OBJ): $(SRC_FILE) $(HDR_FILES)
	@ $(CC) $(CFLAGS) $(REL_FLAGS) -c $< -o $@
$(REL_TEST_OBJ): $(TEST_FILE) $(HDR_FILES)
	@ $(CC) $(CFLAGS) $(REL_FLAGS) -c $< -o $@

# Static library target
static: $(REL_OBJ_DIR)/lib_$(PROJECT).a

$(REL_OBJ_DIR)/lib_$(PROJECT).a: $(REL_SRC_OBJ)
	@ ar rcs $@ $^

# Clean
.PHONY: clean
clean:
	@ rm -f $(DBG_OBJ_DIR)/$(PROJECT)*.o $(REL_OBJ_DIR)/$(PROJECT)*.o\
	   $(DIR)/$(PROJECT)*.out $(DIR)/$(PROJECT)_release.out

open:
	@ find . -type f -name "$(PROJECT)*.c" -exec gedit {} +&
	@ find . -type f -name "$(PROJECT)*.h" -exec gedit {} +&

